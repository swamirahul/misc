Given N and E, the number of nodes and edges in a directed graph. The task is to do Breadth First Search of this graph.

Input:
The first line of input contains the number of test cases T. For each test case, the first line of input contains N and E separated by space, and next line contains 2*E numbers (E pairs as X Y) are given in the next line which represents an edge from X to Y.

Output:
For each testcase, print the BFS of the graph starting from 0.

Note: The expected output button always produces BFS starting from node 0.

User Task:
Since, this is a functional problem, your task is to complete the function bfs() which do BFS of the given graph starting from node 0 and prints the nodes in BFS order.

Constraints:
1 <= T <= 100
1 <= N <= 100

Example:
Input:
2
5 4
0 1 0 2 0 3 2 4
3 2
0 1 0 2

Output:
0 1 2 3 4    // BFS from node 0
0 1 2

import atexit
import io
import sys
from collections import defaultdict
import queue
#Contributed by : Nagendra Jha
#Graph Class:
class Graph():
    def __init__(self,vertices):
        self.graph = defaultdict(list)
        self.V = vertices
    def addEdge(self,u,v): # add directed edge from u to v.
        self.graph[u].append(v)
if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases) :
        N,E = map(int,input().strip().split())
        g = Graph(N)
        edges = list(map(int,input().strip().split()))
        for i in range(0,len(edges),2):
            u,v = edges[i],edges[i+1]
            g.addEdge(u,v) # add a directed edge from u to v
        bfs(g.graph,N) # print bfs of graph
        print()
        
 def bfs(g,N):
    # To keep track of visited child
    visited = set()
    # For storing child which are not yet visited
    my_q = queue.Queue()
    
    my_q.put(0)
    visited.add(0)
    
    while my_q.qsize():
        e = my_q.get()
        print(e, end = ' ')
        for child in g[e]:
            if child not in visited:
                my_q.put(child)
                visited.add(child)
